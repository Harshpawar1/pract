Implement Quicksort using divide and conquer strategy and display time for sorting for 500 values.











import java.util.Arrays;
import java.util.Random;

public class Main {

    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr, i, j);
            }
        }
        swap(arr, i + 1, high);
        return i + 1;
    }

    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void main(String[] args) {
        int[] valuesToSort = new int[500];
        Random random = new Random();

        // Generate 500 random values
        for (int i = 0; i < valuesToSort.length; i++) {
            valuesToSort[i] = random.nextInt(1000);
        }

        // Measure the time taken to sort the values using Quicksort
        long startTime = System.currentTimeMillis();
        quickSort(valuesToSort, 0, valuesToSort.length - 1);
        long endTime = System.currentTimeMillis();

        // Display the sorted values and the time taken for sorting
        System.out.println("Sorted Values: " + Arrays.toString(valuesToSort));
        System.out.println("Time taken for sorting 500 values: " + (endTime - startTime) + " milliseconds");
    }
}
