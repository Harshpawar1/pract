Use same data for Mergesort and compare the time required with Quicksort








import java.util.Arrays;
import java.util.Random;

public class Main {

    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr, i, j);
            }
        }
        swap(arr, i + 1, high);
        return i + 1;
    }

    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void mergeSort(int[] arr, int low, int high) {
        if (low < high) {
            int mid = (low + high) / 2;
            mergeSort(arr, low, mid);
            mergeSort(arr, mid + 1, high);
            merge(arr, low, mid, high);
        }
    }

    public static void merge(int[] arr, int low, int mid, int high) {
        int[] temp = new int[arr.length];
        int i = low;
        int j = mid + 1;
        int k = low;

        while (i <= mid && j <= high) {
            if (arr[i] <= arr[j]) {
                temp[k++] = arr[i++];
            } else {
                temp[k++] = arr[j++];
            }
        }

        while (i <= mid) {
            temp[k++] = arr[i++];
        }

        while (j <= high) {
            temp[k++] = arr[j++];
        }

        for (i = low; i <= high; i++) {
            arr[i] = temp[i];
        }
    }

    public static void main(String[] args) {
        int[] valuesToSortQuickSort = new int[500];
        int[] valuesToSortMergeSort = new int[500];
        Random random = new Random();

        // Generate 500 random values for both Quicksort and Mergesort
        for (int i = 0; i < valuesToSortQuickSort.length; i++) {
            int randomValue = random.nextInt(1000);
            valuesToSortQuickSort[i] = randomValue;
            valuesToSortMergeSort[i] = randomValue;
        }

        // Measure the time taken to sort the values using Quicksort
        long startTimeQuickSort = System.nanoTime();
        quickSort(valuesToSortQuickSort, 0, valuesToSortQuickSort.length - 1);
        long endTimeQuickSort = System.nanoTime();

        // Display the sorted values and the time taken for Quicksort
        System.out.println("Quicksort - Sorted Values: " + Arrays.toString(valuesToSortQuickSort));
        System.out.println("Quicksort - Time taken for sorting 500 values: " + (endTimeQuickSort - startTimeQuickSort) + " nanoseconds");

        // Measure the time taken to sort the values using Mergesort
        long startTimeMergeSort = System.nanoTime();
        mergeSort(valuesToSortMergeSort, 0, valuesToSortMergeSort.length - 1);
        long endTimeMergeSort = System.nanoTime();

        // Display the sorted values and the time taken for Mergesort
        System.out.println("\nMergesort - Sorted Values: " + Arrays.toString(valuesToSortMergeSort));
        System.out.println("Mergesort - Time taken for sorting 500 values: " + (endTimeMergeSort - startTimeMergeSort) + " nanoseconds");

    }
}
