7) Implement solution to Travelling Salesman problem (TSP)
(I)	Using branch and bound technique (preferably using LCBB) 




import java.util.Arrays;
import java.util.Scanner;

public class Main {

    private static int[][] costMatrix;
    private static int[] bestPath;
    private static int bestCost = Integer.MAX_VALUE;
    private static boolean[] visited;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of cities: ");
        int n = scanner.nextInt();

        // Input cost matrix
        costMatrix = new int[n][n];
        System.out.println("Enter the cost matrix:");

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                costMatrix[i][j] = scanner.nextInt();
            }
        }

        scanner.close();

        solveTSP();

        System.out.println("Best TSP Path: " + Arrays.toString(bestPath));
        System.out.println("Best TSP Cost: " + bestCost);
    }

    private static void solveTSP() {
        int n = costMatrix.length;
        visited = new boolean[n];
        bestPath = new int[n];
        Arrays.fill(bestPath, -1);

        // Start from city 0
        visited[0] = true;
        bestPath[0] = 0;

        branchAndBound(1, 0, 0);
    }

    private static void branchAndBound(int level, int currentCost, int currentVertex) {
        int n = costMatrix.length;

        if (level == n) {
            // Reached the end of the path
            if (costMatrix[currentVertex][0] != 0 && currentCost + costMatrix[currentVertex][0] < bestCost) {
                bestCost = currentCost + costMatrix[currentVertex][0];
                bestPath = Arrays.copyOf(visitedToIntArray(), visited.length);
            }
            return;
        }

        for (int i = 0; i < n; i++) {
            if (!visited[i] && costMatrix[currentVertex][i] != 0) {
                int newCost = currentCost + costMatrix[currentVertex][i];
                int lowerBound = calculateLowerBound(newCost, level, i);

                if (lowerBound < bestCost) {
                    visited[i] = true;
                    bestPath[level] = i;

                    branchAndBound(level + 1, newCost, i);

                    // Backtrack
                    visited[i] = false;
                    bestPath[level] = -1;
                }
            }
        }
    }

    private static int calculateLowerBound(int currentCost, int level, int nextVertex) {
        int n = costMatrix.length;
        int lowerBound = currentCost;

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                int minEdgeCost = Integer.MAX_VALUE;

                for (int j = 0; j < n; j++) {
                    if (i != j && !visited[j] && costMatrix[i][j] < minEdgeCost) {
                        minEdgeCost = costMatrix[i][j];
                    }
                }

                lowerBound += minEdgeCost;
            }
        }

        return lowerBound;
    }

    private static int[] visitedToIntArray() {
        int[] intArray = new int[visited.length];
        for (int i = 0; i < visited.length; i++) {
            intArray[i] = visited[i] ? 1 : 0;
        }
        return intArray;
    }
}
